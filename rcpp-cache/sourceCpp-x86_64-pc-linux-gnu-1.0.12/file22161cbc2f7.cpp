// [[Rcpp::depends(StanHeaders)]]
// [[Rcpp::depends(rstan)]]
// [[Rcpp::plugins(rstan)]]
// [[Rcpp::depends(RcppEigen)]]
// [[Rcpp::depends(BH)]]
#include <stan/math/prim/fun/Eigen.hpp>
#include <stan/math/prim/meta.hpp>
#include <boost/integer/integer_log2.hpp>
#include <exporter.h>
#include <RcppEigen.h>

#ifndef USE_STANC3
#define USE_STANC3
#endif
// Code generated by stanc v2.32.2
#include <stan/model/model_header.hpp>
namespace model22129d1ea_User_defined_functions_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 176> locations_array__ =
  {" (found before start of program)",
  " (in 'User-defined functions', line 124, column 2 to column 16)",
  " (in 'User-defined functions', line 125, column 2 to column 16)",
  " (in 'User-defined functions', line 126, column 2 to column 14)",
  " (in 'User-defined functions', line 127, column 2 to column 13)",
  " (in 'User-defined functions', line 128, column 2 to column 18)",
  " (in 'User-defined functions', line 129, column 2 to column 31)",
  " (in 'User-defined functions', line 130, column 2 to column 29)",
  " (in 'User-defined functions', line 131, column 2 to column 25)",
  " (in 'User-defined functions', line 132, column 2 to column 23)",
  " (in 'User-defined functions', line 133, column 2 to column 37)",
  " (in 'User-defined functions', line 134, column 2 to column 35)",
  " (in 'User-defined functions', line 135, column 2 to column 24)",
  " (in 'User-defined functions', line 138, column 2 to column 13)",
  " (in 'User-defined functions', line 139, column 2 to column 19)",
  " (in 'User-defined functions', line 140, column 2 to column 20)",
  " (in 'User-defined functions', line 141, column 2 to column 20)",
  " (in 'User-defined functions', line 142, column 2 to column 20)",
  " (in 'User-defined functions', line 143, column 2 to column 18)",
  " (in 'User-defined functions', line 144, column 2 to column 17)",
  " (in 'User-defined functions', line 145, column 2 to column 31)",
  " (in 'User-defined functions', line 146, column 2 to column 29)",
  " (in 'User-defined functions', line 147, column 2 to column 24)",
  " (in 'User-defined functions', line 151, column 11 to column 12)",
  " (in 'User-defined functions', line 151, column 13 to column 14)",
  " (in 'User-defined functions', line 151, column 4 to column 23)",
  " (in 'User-defined functions', line 152, column 4 to line 155, column 64)",
  " (in 'User-defined functions', line 156, column 4 to column 66)",
  " (in 'User-defined functions', line 178, column 6 to column 22)",
  " (in 'User-defined functions', line 176, column 11 to line 179, column 5)",
  " (in 'User-defined functions', line 171, column 8 to line 174, column 48)",
  " (in 'User-defined functions', line 169, column 13 to line 175, column 7)",
  " (in 'User-defined functions', line 163, column 15 to column 22)",
  " (in 'User-defined functions', line 163, column 23 to column 30)",
  " (in 'User-defined functions', line 163, column 8 to column 45)",
  " (in 'User-defined functions', line 164, column 8 to line 167, column 68)",
  " (in 'User-defined functions', line 168, column 8 to column 88)",
  " (in 'User-defined functions', line 161, column 23 to line 169, column 7)",
  " (in 'User-defined functions', line 161, column 6 to line 175, column 7)",
  " (in 'User-defined functions', line 159, column 19 to line 176, column 5)",
  " (in 'User-defined functions', line 159, column 4 to line 179, column 5)",
  " (in 'User-defined functions', line 148, column 2 to line 180, column 3)",
  " (in 'User-defined functions', line 183, column 2 to column 18)",
  " (in 'User-defined functions', line 184, column 2 to column 24)",
  " (in 'User-defined functions', line 185, column 2 to column 45)",
  " (in 'User-defined functions', line 186, column 2 to column 43)",
  " (in 'User-defined functions', line 187, column 2 to column 50)",
  " (in 'User-defined functions', line 188, column 2 to column 49)",
  " (in 'User-defined functions', line 190, column 2 to column 98)",
  " (in 'User-defined functions', line 191, column 2 to column 76)",
  " (in 'User-defined functions', line 194, column 2 to column 89)",
  " (in 'User-defined functions', line 195, column 2 to column 88)",
  " (in 'User-defined functions', line 196, column 2 to column 83)",
  " (in 'User-defined functions', line 89, column 2 to column 17)",
  " (in 'User-defined functions', line 90, column 2 to column 21)",
  " (in 'User-defined functions', line 91, column 2 to column 17)",
  " (in 'User-defined functions', line 92, column 2 to column 17)",
  " (in 'User-defined functions', line 93, column 2 to column 23)",
  " (in 'User-defined functions', line 94, column 2 to column 23)",
  " (in 'User-defined functions', line 95, column 9 to column 10)",
  " (in 'User-defined functions', line 95, column 11 to column 12)",
  " (in 'User-defined functions', line 95, column 2 to column 16)",
  " (in 'User-defined functions', line 96, column 9 to column 16)",
  " (in 'User-defined functions', line 96, column 17 to column 24)",
  " (in 'User-defined functions', line 96, column 2 to column 34)",
  " (in 'User-defined functions', line 97, column 9 to column 10)",
  " (in 'User-defined functions', line 97, column 2 to column 14)",
  " (in 'User-defined functions', line 98, column 9 to column 16)",
  " (in 'User-defined functions', line 98, column 2 to column 26)",
  " (in 'User-defined functions', line 99, column 2 to column 23)",
  " (in 'User-defined functions', line 100, column 28 to column 37)",
  " (in 'User-defined functions', line 100, column 2 to column 39)",
  " (in 'User-defined functions', line 101, column 2 to column 31)",
  " (in 'User-defined functions', line 102, column 2 to column 33)",
  " (in 'User-defined functions', line 103, column 9 to column 14)",
  " (in 'User-defined functions', line 103, column 2 to column 25)",
  " (in 'User-defined functions', line 104, column 9 to column 10)",
  " (in 'User-defined functions', line 104, column 2 to column 23)",
  " (in 'User-defined functions', line 105, column 13 to column 18)",
  " (in 'User-defined functions', line 105, column 2 to column 32)",
  " (in 'User-defined functions', line 106, column 13 to column 14)",
  " (in 'User-defined functions', line 106, column 2 to column 30)",
  " (in 'User-defined functions', line 107, column 2 to column 8)",
  " (in 'User-defined functions', line 108, column 2 to column 32)",
  " (in 'User-defined functions', line 109, column 26 to column 27)",
  " (in 'User-defined functions', line 109, column 12 to column 21)",
  " (in 'User-defined functions', line 109, column 2 to column 29)",
  " (in 'User-defined functions', line 112, column 2 to column 29)",
  " (in 'User-defined functions', line 113, column 22 to column 32)",
  " (in 'User-defined functions', line 113, column 2 to column 109)",
  " (in 'User-defined functions', line 114, column 22 to column 23)",
  " (in 'User-defined functions', line 114, column 2 to column 77)",
  " (in 'User-defined functions', line 115, column 2 to column 64)",
  " (in 'User-defined functions', line 116, column 12 to column 25)",
  " (in 'User-defined functions', line 116, column 2 to column 73)",
  " (in 'User-defined functions', line 117, column 9 to column 16)",
  " (in 'User-defined functions', line 117, column 2 to column 50)",
  " (in 'User-defined functions', line 118, column 34 to column 35)",
  " (in 'User-defined functions', line 118, column 2 to column 59)",
  " (in 'User-defined functions', line 119, column 34 to column 41)",
  " (in 'User-defined functions', line 119, column 2 to column 73)",
  " (in 'User-defined functions', line 120, column 2 to column 84)",
  " (in 'User-defined functions', line 128, column 9 to column 10)",
  " (in 'User-defined functions', line 131, column 9 to column 10)",
  " (in 'User-defined functions', line 132, column 9 to column 10)",
  " (in 'User-defined functions', line 133, column 9 to column 16)",
  " (in 'User-defined functions', line 134, column 9 to column 16)",
  " (in 'User-defined functions', line 140, column 9 to column 14)",
  " (in 'User-defined functions', line 4, column 26 to column 46)",
  " (in 'User-defined functions', line 4, column 24 to column 48)",
  " (in 'User-defined functions', line 6, column 31 to column 54)",
  " (in 'User-defined functions', line 6, column 29 to column 56)",
  " (in 'User-defined functions', line 14, column 4 to column 39)",
  " (in 'User-defined functions', line 15, column 4 to column 28)",
  " (in 'User-defined functions', line 16, column 11 to column 12)",
  " (in 'User-defined functions', line 16, column 4 to column 68)",
  " (in 'User-defined functions', line 17, column 11 to column 12)",
  " (in 'User-defined functions', line 17, column 4 to column 60)",
  " (in 'User-defined functions', line 18, column 11 to column 12)",
  " (in 'User-defined functions', line 18, column 13 to column 14)",
  " (in 'User-defined functions', line 18, column 4 to column 19)",
  " (in 'User-defined functions', line 19, column 4 to column 21)",
  " (in 'User-defined functions', line 20, column 4 to column 19)",
  " (in 'User-defined functions', line 21, column 4 to column 27)",
  " (in 'User-defined functions', line 22, column 4 to column 35)",
  " (in 'User-defined functions', line 25, column 6 to column 16)",
  " (in 'User-defined functions', line 26, column 6 to column 22)",
  " (in 'User-defined functions', line 27, column 6 to column 31)",
  " (in 'User-defined functions', line 28, column 6 to column 48)",
  " (in 'User-defined functions', line 30, column 8 to column 91)",
  " (in 'User-defined functions', line 29, column 6 to line 30, column 91)",
  " (in 'User-defined functions', line 24, column 18 to line 31, column 5)",
  " (in 'User-defined functions', line 24, column 4 to line 31, column 5)",
  " (in 'User-defined functions', line 32, column 4 to column 15)",
  " (in 'User-defined functions', line 13, column 64 to line 33, column 3)",
  " (in 'User-defined functions', line 37, column 6 to column 28)",
  " (in 'User-defined functions', line 38, column 6 to column 13)",
  " (in 'User-defined functions', line 36, column 22 to line 39, column 5)",
  " (in 'User-defined functions', line 36, column 4 to line 39, column 5)",
  " (in 'User-defined functions', line 41, column 17 to column 24)",
  " (in 'User-defined functions', line 41, column 6 to column 29)",
  " (in 'User-defined functions', line 43, column 1 to column 34)",
  " (in 'User-defined functions', line 42, column 6 to line 43, column 34)",
  " (in 'User-defined functions', line 44, column 6 to column 34)",
  " (in 'User-defined functions', line 40, column 25 to line 45, column 5)",
  " (in 'User-defined functions', line 40, column 4 to line 45, column 5)",
  " (in 'User-defined functions', line 35, column 30 to line 46, column 3)",
  " (in 'User-defined functions', line 49, column 11 to column 18)",
  " (in 'User-defined functions', line 49, column 4 to column 22)",
  " (in 'User-defined functions', line 51, column 6 to column 29)",
  " (in 'User-defined functions', line 50, column 4 to line 51, column 29)",
  " (in 'User-defined functions', line 52, column 4 to column 14)",
  " (in 'User-defined functions', line 48, column 28 to line 53, column 3)",
  " (in 'User-defined functions', line 57, column 11 to column 18)",
  " (in 'User-defined functions', line 57, column 19 to column 26)",
  " (in 'User-defined functions', line 57, column 4 to column 32)",
  " (in 'User-defined functions', line 59, column 4 to column 67)",
  " (in 'User-defined functions', line 60, column 4 to column 31)",
  " (in 'User-defined functions', line 56, column 45 to line 61, column 3)",
  " (in 'User-defined functions', line 70, column 4 to column 27)",
  " (in 'User-defined functions', line 71, column 4 to column 40)",
  " (in 'User-defined functions', line 72, column 11 to column 18)",
  " (in 'User-defined functions', line 72, column 4 to column 33)",
  " (in 'User-defined functions', line 73, column 11 to column 18)",
  " (in 'User-defined functions', line 73, column 19 to column 26)",
  " (in 'User-defined functions', line 73, column 4 to column 40)",
  " (in 'User-defined functions', line 74, column 13 to column 20)",
  " (in 'User-defined functions', line 74, column 4 to column 55)",
  " (in 'User-defined functions', line 75, column 11 to column 18)",
  " (in 'User-defined functions', line 75, column 19 to column 26)",
  " (in 'User-defined functions', line 75, column 4 to column 40)",
  " (in 'User-defined functions', line 76, column 4 to line 79, column 63)",
  " (in 'User-defined functions', line 80, column 4 to column 41)",
  " (in 'User-defined functions', line 82, column 4 to line 83, column 70)",
  " (in 'User-defined functions', line 84, column 4 to column 77)",
  " (in 'User-defined functions', line 69, column 33 to line 85, column 3)"};
template <typename T0__,
          stan::require_all_t<stan::is_stan_scalar<T0__>>* = nullptr>
stan::promote_args_t<T0__> valogit(const T0__& va, std::ostream* pstream__);
template <typename T0__,
          stan::require_all_t<stan::is_stan_scalar<T0__>>* = nullptr>
stan::promote_args_t<T0__>
inv_valogit(const T0__& tva, std::ostream* pstream__);
template <typename T0__, typename T2__, typename T3__, typename T4__,
          typename T5__, typename T6__, typename T7__, typename T8__,
          typename T9__, typename T10__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_stan_scalar<T3__>,
                              stan::is_stan_scalar<T4__>,
                              stan::is_stan_scalar<T5__>,
                              stan::is_stan_scalar<T6__>,
                              stan::is_col_vector<T7__>,
                              stan::is_vt_not_complex<T7__>,
                              stan::is_col_vector<T8__>,
                              stan::is_vt_not_complex<T8__>,
                              stan::is_stan_scalar<T9__>,
                              stan::is_stan_scalar<T10__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>, T2__, T3__, T4__,
                T5__,
                stan::promote_args_t<T6__, stan::base_type_t<T7__>,
                  stan::base_type_t<T8__>, T9__, T10__>>,-1,-1>
evaluate_model(const T0__& x_arg__, const std::vector<int>& DRUG, const T2__&
               Lalpha_0, const T3__& Lalpha_s, const T4__& lkappa,
               const T5__& lEmax, const T6__& delta, const T7__&
               eta_Lalpha_0_arg__, const T8__& eta_lkappa_arg__, const T9__&
               sigma_Lalpha_0, const T10__& sigma_lkappa, std::ostream*
               pstream__);
template <typename T0__,
          stan::require_all_t<stan::is_eigen_matrix_dynamic<T0__>,
                              stan::is_vt_not_complex<T0__>>* = nullptr>
void pretty_print(const T0__& x_arg__, std::ostream* pstream__);
template <typename T0__,
          stan::require_all_t<stan::is_eigen_matrix_dynamic<T0__>,
                              stan::is_vt_not_complex<T0__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>>,-1,1>
colMeans(const T0__& y_arg__, std::ostream* pstream__);
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_eigen_matrix_dynamic<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_row_vector<T1__>,
                              stan::is_vt_not_complex<T1__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>>,-1,-1>
robust_cov(const T0__& y_arg__, const T1__& ym_arg__, std::ostream* pstream__);
template <bool propto__, typename T0__, typename T1__, typename T4__,
          typename T5__, typename T6__, typename T7__, typename T8__,
          typename T9__, typename T10__, typename T11__, typename T12__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_col_vector<T4__>,
                              stan::is_vt_not_complex<T4__>,
                              stan::is_stan_scalar<T5__>,
                              stan::is_stan_scalar<T6__>,
                              stan::is_stan_scalar<T7__>,
                              stan::is_stan_scalar<T8__>,
                              stan::is_stan_scalar<T9__>,
                              stan::is_stan_scalar<T10__>,
                              stan::is_stan_scalar<T11__>,
                              stan::is_eigen_matrix_dynamic<T12__>,
                              stan::is_vt_not_complex<T12__>>* = nullptr>
stan::promote_args_t<stan::base_type_t<T0__>, stan::base_type_t<T1__>,
  stan::base_type_t<T4__>, T5__, T6__,
  stan::promote_args_t<T7__, T8__, T9__, T10__, T11__,
    stan::promote_args_t<stan::base_type_t<T12__>>>>
mvn_approx_lpdf(const T0__& y_prime_bar_arg__, const T1__& x_prime_arg__,
                const int& J_prime, const int& DRUG_prime, const T4__&
                delta_arg__, const T5__& Lalpha_0, const T6__& Lalpha_s,
                const T7__& lkappa, const T8__& lEmax, const T9__&
                sigma_Lalpha_0, const T10__& sigma_lkappa, const T11__&
                sigma_y, const T12__& xi_arg__, std::ostream* pstream__);
template <typename T0__, stan::require_all_t<stan::is_stan_scalar<T0__>>*>
stan::promote_args_t<T0__> valogit(const T0__& va, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 108;
    return stan::math::logit(va);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, stan::require_all_t<stan::is_stan_scalar<T0__>>*>
stan::promote_args_t<T0__>
inv_valogit(const T0__& tva, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 110;
    return stan::math::inv_logit(tva);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T2__, typename T3__, typename T4__,
          typename T5__, typename T6__, typename T7__, typename T8__,
          typename T9__, typename T10__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_stan_scalar<T3__>,
                              stan::is_stan_scalar<T4__>,
                              stan::is_stan_scalar<T5__>,
                              stan::is_stan_scalar<T6__>,
                              stan::is_col_vector<T7__>,
                              stan::is_vt_not_complex<T7__>,
                              stan::is_col_vector<T8__>,
                              stan::is_vt_not_complex<T8__>,
                              stan::is_stan_scalar<T9__>,
                              stan::is_stan_scalar<T10__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>, T2__, T3__, T4__,
                T5__,
                stan::promote_args_t<T6__, stan::base_type_t<T7__>,
                  stan::base_type_t<T8__>, T9__, T10__>>,-1,-1>
evaluate_model(const T0__& x_arg__, const std::vector<int>& DRUG, const T2__&
               Lalpha_0, const T3__& Lalpha_s, const T4__& lkappa,
               const T5__& lEmax, const T6__& delta, const T7__&
               eta_Lalpha_0_arg__, const T8__& eta_lkappa_arg__, const T9__&
               sigma_Lalpha_0, const T10__& sigma_lkappa, std::ostream*
               pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             T2__, T3__, T4__, T5__,
                             stan::promote_args_t<T6__,
                               stan::base_type_t<T7__>,
                               stan::base_type_t<T8__>, T9__, T10__>>;
  int current_statement__ = 0;
  const auto& x = stan::math::to_ref(x_arg__);
  const auto& eta_Lalpha_0 = stan::math::to_ref(eta_Lalpha_0_arg__);
  const auto& eta_lkappa = stan::math::to_ref(eta_lkappa_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int J = std::numeric_limits<int>::min();
    current_statement__ = 112;
    J = stan::math::num_elements(eta_Lalpha_0);
    int T = std::numeric_limits<int>::min();
    current_statement__ = 113;
    T = stan::math::num_elements(x);
    current_statement__ = 114;
    stan::math::validate_non_negative_index("Lalpha_0_j", "J", J);
    Eigen::Matrix<local_scalar_t__,-1,1> Lalpha_0_j =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(J, DUMMY_VAR__);
    current_statement__ = 115;
    stan::model::assign(Lalpha_0_j,
      stan::math::add(Lalpha_0,
        stan::math::multiply(sigma_Lalpha_0, eta_Lalpha_0)),
      "assigning variable Lalpha_0_j");
    current_statement__ = 116;
    stan::math::validate_non_negative_index("lkappa_j", "J", J);
    Eigen::Matrix<local_scalar_t__,-1,1> lkappa_j =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(J, DUMMY_VAR__);
    current_statement__ = 117;
    stan::model::assign(lkappa_j,
      stan::math::add(lkappa, stan::math::multiply(sigma_lkappa, eta_lkappa)),
      "assigning variable lkappa_j");
    current_statement__ = 118;
    stan::math::validate_non_negative_index("mu", "J", J);
    current_statement__ = 119;
    stan::math::validate_non_negative_index("mu", "T", T);
    Eigen::Matrix<local_scalar_t__,-1,-1> mu =
      Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(J, T, DUMMY_VAR__);
    Eigen::Matrix<local_scalar_t__,-1,1> Emax_s =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(3, DUMMY_VAR__);
    current_statement__ = 122;
    stan::model::assign(Emax_s, 0., "assigning variable Emax_s",
      stan::model::index_uni(1));
    current_statement__ = 123;
    stan::model::assign(Emax_s, stan::math::exp(lEmax),
      "assigning variable Emax_s", stan::model::index_uni(2));
    current_statement__ = 124;
    stan::model::assign(Emax_s, stan::math::exp((lEmax + delta)),
      "assigning variable Emax_s", stan::model::index_uni(3));
    current_statement__ = 132;
    for (int j = 1; j <= J; ++j) {
      local_scalar_t__ kout = DUMMY_VAR__;
      local_scalar_t__ Lalpha_s_j = DUMMY_VAR__;
      current_statement__ = 127;
      kout = stan::math::exp(
               -stan::model::rvalue(lkappa_j, "lkappa_j",
                  stan::model::index_uni(j)));
      current_statement__ = 128;
      Lalpha_s_j = (Lalpha_s +
        stan::model::rvalue(Emax_s, "Emax_s",
          stan::model::index_uni(
            (stan::model::rvalue(DRUG, "DRUG", stan::model::index_uni(j)) +
            1))));
      current_statement__ = 130;
      for (int k = 1; k <= T; ++k) {
        current_statement__ = 129;
        stan::model::assign(mu,
          inv_valogit((Lalpha_s_j +
            ((stan::model::rvalue(Lalpha_0_j, "Lalpha_0_j",
                stan::model::index_uni(j)) - Lalpha_s_j) *
            stan::math::exp((-kout *
              stan::model::rvalue(x, "x", stan::model::index_uni(k)))))),
            pstream__), "assigning variable mu", stan::model::index_uni(j),
          stan::model::index_uni(k));
      }
    }
    current_statement__ = 133;
    return mu;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__,
          stan::require_all_t<stan::is_eigen_matrix_dynamic<T0__>,
                              stan::is_vt_not_complex<T0__>>*>
void pretty_print(const T0__& x_arg__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>>;
  int current_statement__ = 0;
  const auto& x = stan::math::to_ref(x_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 138;
    if (stan::math::logical_eq(stan::math::rows(x), 0)) {
      current_statement__ = 135;
      if (pstream__) {
        stan::math::stan_print(pstream__, "empty matrix");
        *(pstream__) << std::endl;
      }
      current_statement__ = 136;
      return ;
    }
    current_statement__ = 145;
    for (int m = 1; m <= stan::math::rows(x); ++m) {
      current_statement__ = 139;
      stan::math::validate_non_negative_index("rv", "cols(x)",
        stan::math::cols(x));
      Eigen::Matrix<local_scalar_t__,1,-1> rv =
        Eigen::Matrix<local_scalar_t__,1,-1>::Constant(stan::math::cols(x),
          DUMMY_VAR__);
      current_statement__ = 142;
      for (int n = 1; n <= stan::math::cols(x); ++n) {
        current_statement__ = 141;
        stan::model::assign(rv,
          (stan::math::round((1000 *
             stan::model::rvalue(x, "x", stan::model::index_uni(m),
               stan::model::index_uni(n)))) / 1000.),
          "assigning variable rv", stan::model::index_uni(n));
      }
      current_statement__ = 143;
      if (pstream__) {
        stan::math::stan_print(pstream__, "row ");
        stan::math::stan_print(pstream__, m);
        stan::math::stan_print(pstream__, " = ");
        stan::math::stan_print(pstream__, rv);
        *(pstream__) << std::endl;
      }
    }
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__,
          stan::require_all_t<stan::is_eigen_matrix_dynamic<T0__>,
                              stan::is_vt_not_complex<T0__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>>,-1,1>
colMeans(const T0__& y_arg__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>>;
  int current_statement__ = 0;
  const auto& y = stan::math::to_ref(y_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 147;
    stan::math::validate_non_negative_index("m", "cols(y)",
      stan::math::cols(y));
    Eigen::Matrix<local_scalar_t__,-1,1> m =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(stan::math::cols(y),
        DUMMY_VAR__);
    current_statement__ = 150;
    for (int i = 1; i <= stan::math::cols(y); ++i) {
      current_statement__ = 149;
      stan::model::assign(m, stan::math::mean(stan::math::col(y, i)),
        "assigning variable m", stan::model::index_uni(i));
    }
    current_statement__ = 151;
    return m;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_eigen_matrix_dynamic<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_row_vector<T1__>,
                              stan::is_vt_not_complex<T1__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>>,-1,-1>
robust_cov(const T0__& y_arg__, const T1__& ym_arg__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             stan::base_type_t<T1__>>;
  int current_statement__ = 0;
  const auto& y = stan::math::to_ref(y_arg__);
  const auto& ym = stan::math::to_ref(ym_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 153;
    stan::math::validate_non_negative_index("cov", "cols(y)",
      stan::math::cols(y));
    current_statement__ = 154;
    stan::math::validate_non_negative_index("cov", "cols(y)",
      stan::math::cols(y));
    Eigen::Matrix<local_scalar_t__,-1,-1> cov =
      Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(stan::math::cols(y),
        stan::math::cols(y), DUMMY_VAR__);
    current_statement__ = 156;
    stan::model::assign(cov,
      stan::math::divide(
        stan::math::crossprod(
          stan::math::subtract(y,
            stan::math::rep_matrix(ym, stan::math::rows(y)))),
        (stan::math::rows(y) - 1.0)), "assigning variable cov");
    current_statement__ = 157;
    return stan::math::multiply(0.5,
             stan::math::add(cov, stan::math::transpose(cov)));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <bool propto__, typename T0__, typename T1__, typename T4__,
          typename T5__, typename T6__, typename T7__, typename T8__,
          typename T9__, typename T10__, typename T11__, typename T12__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_col_vector<T4__>,
                              stan::is_vt_not_complex<T4__>,
                              stan::is_stan_scalar<T5__>,
                              stan::is_stan_scalar<T6__>,
                              stan::is_stan_scalar<T7__>,
                              stan::is_stan_scalar<T8__>,
                              stan::is_stan_scalar<T9__>,
                              stan::is_stan_scalar<T10__>,
                              stan::is_stan_scalar<T11__>,
                              stan::is_eigen_matrix_dynamic<T12__>,
                              stan::is_vt_not_complex<T12__>>*>
stan::promote_args_t<stan::base_type_t<T0__>, stan::base_type_t<T1__>,
  stan::base_type_t<T4__>, T5__, T6__,
  stan::promote_args_t<T7__, T8__, T9__, T10__, T11__,
    stan::promote_args_t<stan::base_type_t<T12__>>>>
mvn_approx_lpdf(const T0__& y_prime_bar_arg__, const T1__& x_prime_arg__,
                const int& J_prime, const int& DRUG_prime, const T4__&
                delta_arg__, const T5__& Lalpha_0, const T6__& Lalpha_s,
                const T7__& lkappa, const T8__& lEmax, const T9__&
                sigma_Lalpha_0, const T10__& sigma_lkappa, const T11__&
                sigma_y, const T12__& xi_arg__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             stan::base_type_t<T1__>,
                             stan::base_type_t<T4__>, T5__, T6__,
                             stan::promote_args_t<T7__, T8__, T9__, T10__,
                               T11__,
                               stan::promote_args_t<stan::base_type_t<T12__>>>>;
  int current_statement__ = 0;
  const auto& y_prime_bar = stan::math::to_ref(y_prime_bar_arg__);
  const auto& x_prime = stan::math::to_ref(x_prime_arg__);
  const auto& delta = stan::math::to_ref(delta_arg__);
  const auto& xi = stan::math::to_ref(xi_arg__);
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int J_tilde = std::numeric_limits<int>::min();
    current_statement__ = 159;
    J_tilde = stan::math::cols(xi);
    int T_prime = std::numeric_limits<int>::min();
    current_statement__ = 160;
    T_prime = stan::math::num_elements(x_prime);
    current_statement__ = 161;
    stan::math::validate_non_negative_index("y_prime_mean", "T_prime",
      T_prime);
    Eigen::Matrix<local_scalar_t__,-1,1> y_prime_mean =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(T_prime, DUMMY_VAR__);
    current_statement__ = 163;
    stan::math::validate_non_negative_index("y_prime_var", "T_prime", T_prime);
    current_statement__ = 164;
    stan::math::validate_non_negative_index("y_prime_var", "T_prime", T_prime);
    Eigen::Matrix<local_scalar_t__,-1,-1> y_prime_var =
      Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(T_prime, T_prime,
        DUMMY_VAR__);
    current_statement__ = 166;
    stan::math::validate_non_negative_index("DRUG", "J_tilde", J_tilde);
    std::vector<int> DRUG =
      std::vector<int>(J_tilde, std::numeric_limits<int>::min());
    current_statement__ = 167;
    stan::model::assign(DRUG, stan::math::rep_array(DRUG_prime, J_tilde),
      "assigning variable DRUG");
    current_statement__ = 168;
    stan::math::validate_non_negative_index("y_prime_sim", "J_tilde", J_tilde);
    current_statement__ = 169;
    stan::math::validate_non_negative_index("y_prime_sim", "T_prime", T_prime);
    Eigen::Matrix<local_scalar_t__,-1,-1> y_prime_sim =
      Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(J_tilde, T_prime,
        DUMMY_VAR__);
    current_statement__ = 171;
    stan::model::assign(y_prime_sim,
      evaluate_model(x_prime, DRUG, Lalpha_0, Lalpha_s, lkappa, lEmax,
        stan::model::rvalue(delta, "delta", stan::model::index_uni(1)),
        stan::math::to_vector(
          stan::model::rvalue(xi, "xi", stan::model::index_uni(1))),
        stan::math::to_vector(
          stan::model::rvalue(xi, "xi", stan::model::index_uni(2))),
        sigma_Lalpha_0, sigma_lkappa, pstream__),
      "assigning variable y_prime_sim");
    current_statement__ = 172;
    stan::model::assign(y_prime_mean, colMeans(y_prime_sim, pstream__),
      "assigning variable y_prime_mean");
    current_statement__ = 173;
    stan::model::assign(y_prime_var,
      stan::math::add(
        robust_cov(y_prime_sim, stan::math::to_row_vector(y_prime_mean),
          pstream__),
        stan::math::diag_matrix(
          stan::math::rep_vector(stan::math::square(sigma_y),
            stan::math::num_elements(x_prime)))),
      "assigning variable y_prime_var");
    current_statement__ = 174;
    return stan::math::multi_normal_lpdf<false>(y_prime_bar, y_prime_mean,
             stan::math::divide(y_prime_var, J_prime));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
}
// [[Rcpp::export]]
auto valogit(const double& va, std::ostream* pstream__ = 0) {
  return model22129d1ea_User_defined_functions_namespace::valogit(va,
           pstream__);
}
// [[Rcpp::export]]
auto inv_valogit(const double& tva, std::ostream* pstream__ = 0) {
  return model22129d1ea_User_defined_functions_namespace::inv_valogit(tva,
           pstream__);
}
// [[Rcpp::export]]
auto
evaluate_model(const Eigen::Matrix<double,-1,1>& x, const std::vector<int>&
               DRUG, const double& Lalpha_0, const double& Lalpha_s,
               const double& lkappa, const double& lEmax, const double&
               delta, const Eigen::Matrix<double,-1,1>& eta_Lalpha_0,
               const Eigen::Matrix<double,-1,1>& eta_lkappa, const double&
               sigma_Lalpha_0, const double& sigma_lkappa, std::ostream*
               pstream__ = 0) {
  return model22129d1ea_User_defined_functions_namespace::evaluate_model(x,
           DRUG, Lalpha_0, Lalpha_s, lkappa, lEmax, delta, eta_Lalpha_0,
           eta_lkappa, sigma_Lalpha_0, sigma_lkappa, pstream__);
}
// [[Rcpp::export]]
void
pretty_print(const Eigen::Matrix<double,-1,-1>& x, std::ostream*
             pstream__ = 0) {
  model22129d1ea_User_defined_functions_namespace::pretty_print(x, pstream__);
}
// [[Rcpp::export]]
auto
colMeans(const Eigen::Matrix<double,-1,-1>& y, std::ostream*
         pstream__ = 0) {
  return model22129d1ea_User_defined_functions_namespace::colMeans(y,
           pstream__);
}
// [[Rcpp::export]]
auto
robust_cov(const Eigen::Matrix<double,-1,-1>& y,
           const Eigen::Matrix<double,1,-1>& ym, std::ostream*
           pstream__ = 0) {
  return model22129d1ea_User_defined_functions_namespace::robust_cov(y, ym,
           pstream__);
}
// [[Rcpp::export]]
auto
mvn_approx_lpdf(const Eigen::Matrix<double,-1,1>& y_prime_bar,
                const Eigen::Matrix<double,-1,1>& x_prime, const int&
                J_prime, const int& DRUG_prime,
                const Eigen::Matrix<double,-1,1>& delta, const double&
                Lalpha_0, const double& Lalpha_s, const double& lkappa,
                const double& lEmax, const double& sigma_Lalpha_0,
                const double& sigma_lkappa, const double& sigma_y,
                const Eigen::Matrix<double,-1,-1>& xi, std::ostream*
                pstream__ = 0) {
  return model22129d1ea_User_defined_functions_namespace::mvn_approx_lpdf<
           false>(y_prime_bar, x_prime, J_prime, DRUG_prime, delta, Lalpha_0,
           Lalpha_s, lkappa, lEmax, sigma_Lalpha_0, sigma_lkappa, sigma_y,
           xi, pstream__);
}
