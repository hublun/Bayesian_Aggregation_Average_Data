Epsilon <-mvrnorm(N, mu_epsilon, Psi) # sample error vector
Y<-Theta%*%t(L)+Epsilon# generate observable data
library("rbokeh")
df<-data.frame(Y)
tools <- c("pan", "wheel_zoom", "resize", "reset")
nms <- expand.grid(names(df)[1:P], rev(names(df)[1:P]), stringsAsFactors = FALSE)
nms$yaxis <- rep(c(TRUE, rep(FALSE, P-1)), P)
nms$xaxis <- c(rep(FALSE, (P-1)*P), rep(TRUE, P))
nms$h <- nms$w <- 75
nms$h[nms$xaxis] <- nms$w[nms$yaxis] <- 90
splom_list <- vector("list", P^2)
for(i in seq_along(splom_list)) {
splom_list[[i]] <- figure(width = nms$w[i], height = nms$h[i],
tools = tools, min_border = 2) %>%
ly_points(nms$Var1[i], nms$Var2[i], data = df,
size = 1) %>%
x_axis(visible = nms$xaxis[i]) %>%
y_axis(visible = nms$yaxis[i])
}
grid_plot(splom_list, nrow = P, ncol = P, same_axes = TRUE, link_data = TRUE)
install.packages("gridPlot")
install.packages(c("testthat", "trialr"))
library(dplyr)
library(rstan)
library(bayesplot)
library(Metrics)
options(mc.cores = parallel::detectCores())
rstan_options(auto_write = TRUE)
#========================================================================
data_list <- readRDS(file = paste0(getwd(),'/Documents/Github',
'/Stan/Factorization/factor_data_list.rds', sep = ""))
#========================================================================
data_list <- readRDS(file = paste0(getwd(),#'/Documents/Github',
'/Stan/Factorization/factor_data_list.rds', sep = ""))
#------------------------------------------------------------------------
remove(model)
model = stan_model(paste0(getwd(),'/Documents/Github' ,
'/Stan/RStan/Models/factor_mvn.stan'))
model = stan_model(paste0(getwd(),#'/Documents/Github' ,
'/Stan/RStan/Models/factor_mvn.stan'))
#------------------------------------------------------------------------
remove(fit)
fit <- sampling(object = model,
data = data_list,
init = "random",
control = list(adapt_delta = 0.95),
chains = 4,
iter = 888,
warmup = 555,
thin = 1,
verbose = TRUE)
s <- summary(fit)
dfs <- data.frame(s$summary)
install.packages(c("posterior", "rlang", "tidybayes"))
install.packages("vctrs")
install.packages("blob")
install.packages(c("commonmark", "gtable", "htmlwidgets", "tibble"))
install.packages(c("gtable", "ps"))
install.packages(c("dbplyr", "distributional", "dplyr", "dtplyr", "googledrive", "hexbin", "hms", "modelr", "pillar", "vctrs"))
install.packages(c("cli", "googlesheets4", "htmltools", "xfun"))
install.packages("rmarkdown")
install.packages(c("ggplot2", "loo", "ps", "rstantools"))
install.packages(c("igraph", "markdown", "quantreg", "V8"))
install.packages(c("gargle", "zoo"))
install.packages(c("fontawesome", "processx", "ps", "tinytex", "vctrs", "xfun", "xts", "zip"))
install.packages("dplyr")
library(dplyr)
library(rstan)
library(bayesplot)
library(Metrics)
options(mc.cores = parallel::detectCores())
rstan_options(auto_write = TRUE)
#========================================================================
data_list <- readRDS(file = paste0(getwd(),#'/Documents/Github',
'/Stan/Factorization/factor_data_list.rds', sep = ""))
#------------------------------------------------------------------------
remove(model)
model = stan_model(paste0(getwd(),#'/Documents/Github' ,
'/Stan/RStan/Models/factor_mvn.stan'))
#========================================================================
data_list <- readRDS(file = paste0(getwd(),#'/Documents/Github',
'/Stan/Factorization/factor_data_list.rds', sep = ""))
#------------------------------------------------------------------------
remove(model)
model = stan_model(paste0(getwd(),#'/Documents/Github' ,
'/Stan/RStan/Models/factor_mvn.stan'))
#------------------------------------------------------------------------
remove(model)
model = stan_model(paste0(getwd(),#'/Documents/Github' ,
'/Stan/RStan/Models/factor_mvn.stan'))
#------------------------------------------------------------------------
remove(fit)
fit <- sampling(object = model,
data = data_list,
init = "random",
control = list(adapt_delta = 0.95),
chains = 4,
iter = 888,
warmup = 555,
thin = 1,
verbose = TRUE)
model = stan_model(paste0(getwd(),#'/Documents/Github' ,
'/Stan/RStan/Models/factor_mvn.stan'))
#========================================================================
remove(list = ls())
#========================================================================
data_list <- readRDS(file = paste0(getwd(),#'/Documents/Github',
'/Stan/Factorization/factor_data_list.rds', sep = ""))
#------------------------------------------------------------------------
remove(model)
model = stan_model(paste0(getwd(),#'/Documents/Github' ,
'/Stan/RStan/Models/factor_mvn.stan'))
library(dplyr)
library(rstan)
library(bayesplot)
library(Metrics)
options(mc.cores = parallel::detectCores())
rstan_options(auto_write = TRUE)
#========================================================================
data_list <- readRDS(file = paste0(getwd(),'/Documents/Github',
'/Stan/Factorization/factor_data_list.rds', sep = ""))
data_list$N
data_list$P
data_list$D
data_list$Y
#------------------------------------------------------------------------
remove(model)
model = stan_model(paste0(getwd(),'/Documents/Github' ,
'/Stan/RStan/Models/factor_mvn.stan'))
#------------------------------------------------------------------------
remove(fit)
fit <- sampling(object = model,
data = data_list,
init = "random",
control = list(adapt_delta = 0.95),
chains = 1,
iter = 1,
#warmup = 555,
#thin = 1,
verbose = TRUE)
#========================================================================
data_list <- readRDS(file = paste0(getwd(),#'/Documents/Github',
'/Stan/Factorization/factor_data_list.rds', sep = ""))
data_list$N
data_list$P
data_list$D
model = stan_model(paste0(getwd(),#'/Documents/Github' ,
'/Stan/RStan/Models/factor_mvn.stan'))
#========================================================================
data_list <- readRDS(file = paste0(getwd(),#'/Documents/Github',
'/Stan/Factorization/factor_data_list.rds', sep = ""))
data_list$N
data_list$P
data_list$D
data_list$Y
#------------------------------------------------------------------------
remove(model)
model = stan_model(paste0(getwd(),#'/Documents/Github' ,
'/Stan/RStan/Models/factor_mvn.stan'))
library(dplyr)
library(rstan)
library(bayesplot)
library(Metrics)
options(mc.cores = parallel::detectCores())
rstan_options(auto_write = TRUE)
#========================================================================
data_list <- readRDS(file = paste0(getwd(),#'/Documents/Github',
'/Stan/Factorization/factor_data_list.rds', sep = ""))
data_list$N
data_list$P
data_list$D
data_list$Y
#------------------------------------------------------------------------
remove(model)
model = stan_model(paste0(getwd(),#'/Documents/Github' ,
'/Stan/RStan/Models/factor_mvn.stan'))
#------------------------------------------------------------------------
remove(fit)
fit <- sampling(object = model,
data = data_list,
init = "random",
control = list(adapt_delta = 0.95),
chains = 1,
iter = 1,
#warmup = 555,
#thin = 1,
verbose = TRUE)
install.packages('IRkernel')
IRkernel::installspec()
#========================================================================
data_list <- readRDS(file = paste0(getwd(),#'/Documents/Github',
'/Stan/Factorization/factor_data_list.rds', sep = ""))
data_list$N
data_list$P
data_list$D
data_list$Y
#------------------------------------------------------------------------
remove(model)
model = stan_model(paste0(getwd(),#'/Documents/Github' ,
'/Stan/RStan/Models/factor_mvn.stan'))
#------------------------------------------------------------------------
remove(fit)
fit <- sampling(object = model,
data = data_list,
init = "random",
control = list(adapt_delta = 0.95),
chains = 1,
iter = 1,
#warmup = 555,
#thin = 1,
verbose = TRUE)
fit <- sampling(object = model,
data = data_list,
init = "random",
control = list(adapt_delta = 0.95),
chains = 4,
iter = 888,
warmup = 555,
thin = 1,
verbose = TRUE)
s <- summary(fit)
dfs <- data.frame(s$summary)
result <- filter(dfs, Rhat > 1.1)
row.names(result)
names(fit)
traceplot(fit, pars=c("delta_mu"))
#-------------------------------------------------
theme_Posterior = theme(
axis.line.x = element_line(arrow=arrow(length=unit(0.05, "cm")), lineend = "butt"),
panel.background = element_rect(fill="transparent"),
panel.border = element_rect(fill="transparent"),
plot.background = element_rect(fill = "transparent"),
#panel.spacing.y = unit(1,"lines"),
plot.margin = unit(c(1,1,1,1), "cm"),
#
axis.title.y = element_blank(),
axis.text.y = element_text(color = "grey20", size = 8, angle = 0, hjust = 1, vjust = 0, face = "plain"),
axis.text.x = element_text(color="grey20",hjust=1, vjust=1, size=8, angle=50, face="plain"),
axis.ticks.y = element_blank()
)
#---------------------------
plot(fit,
pars = names(fit)[c(1:3)],
show_density = FALSE,
fill_color = "#998811",
est_color = "#ffffff",
ci_level = 0.9, outer_level=0.95) +
geom_vline(xintercept = 0, linetype = 3, linewidth = 0.5) +
theme_Posterior
traceplot(fit, pars=c("L_d"))
#---------------------------
plot(fit,
pars = names(fit)[c(1:24)],
show_density = FALSE,
fill_color = "#998811",
est_color = "#ffffff",
ci_level = 0.9, outer_level=0.95) +
geom_vline(xintercept = 0, linetype = 3, linewidth = 0.5) +
theme_Posterior
plot(fit,
pars = c('L'),
show_density = FALSE,
fill_color = "#998811",
est_color = "#ffffff",
ci_level = 0.9, outer_level=0.95) +
geom_vline(xintercept = 0, linetype = 3, linewidth = 0.5) +
theme_Posterior
install.packages("bayesplot")
R
library(Metrics)
#------------------------------------------------------------------------
remove(model)
model = stan_model(paste0(getwd(),#'/Documents/Github' ,
'/Stan/RStan/Models/factor_mvn.stan'))
#------------------------------------------------------------------------
remove(fit)
fit <- sampling(object = model,
data = data_list,
init = "random",
control = list(adapt_delta = 0.95),
chains = 4,
iter = 888,
warmup = 555,
thin = 1,
verbose = TRUE)
s <- summary(fit)
dfs <- data.frame(s$summary)
library(dplyr)
library(rstan)
library(bayesplot)
library(Metrics)
options(mc.cores = parallel::detectCores())
rstan_options(auto_write = TRUE)
s <- summary(fit)
dfs <- data.frame(s$summary)
result <- filter(dfs, Rhat > 1.1)
row.names(result)
names(fit)
traceplot(fit, pars=c("L_d"))
#-------------------------------------------------
theme_Posterior = theme(
axis.line.x = element_line(arrow=arrow(length=unit(0.05, "cm")), lineend = "butt"),
panel.background = element_rect(fill="transparent"),
panel.border = element_rect(fill="transparent"),
plot.background = element_rect(fill = "transparent"),
#panel.spacing.y = unit(1,"lines"),
plot.margin = unit(c(1,1,1,1), "cm"),
#
axis.title.y = element_blank(),
axis.text.y = element_text(color = "grey20", size = 8, angle = 0, hjust = 1, vjust = 0, face = "plain"),
axis.text.x = element_text(color="grey20",hjust=1, vjust=1, size=8, angle=50, face="plain"),
axis.ticks.y = element_blank()
)
#---------------------------
plot(fit,
pars = names(fit)[c(1:24)],
show_density = FALSE,
fill_color = "#998811",
est_color = "#ffffff",
ci_level = 0.9, outer_level=0.95) +
geom_vline(xintercept = 0, linetype = 3, linewidth = 0.5) +
theme_Posterior
plot(fit,
pars = c('L'),
show_density = FALSE,
fill_color = "#998811",
est_color = "#ffffff",
ci_level = 0.9, outer_level=0.95) +
geom_vline(xintercept = 0, linetype = 3, linewidth = 0.5) +
theme_Posterior
library(bayesplot)
install.packages("StanHeaders")
library(bayesplot)
install.packages("styler")
install.packages("bayesplot")
#===========================================
devtools::install_github("stan-dev/bayesplot")
#===========================================
if (!require("devtools")) {
install.packages("devtools")
}
install.packages("devtools")
devtools::install_github("stan-dev/bayesplot")
#===========================================
if (!require("devtools")) {
install.packages("devtools")
}
devtools::install_github("stan-dev/bayesplot")
install.packages("StanHeaders")
install.packages("matrixStats")
install.packages("styler")
install.packages(c("StanHeaders", "vctrs"))
install.packages("testthat")
install.packages("digest")
install.packages(c("digest", "Rcpp", "testthat"))
install.packages("lintr")
sudo apt update
install.packages(c("ggplot2", "languageserver"))
install.packages(c("cyclocomp", "dplyr", "gtable", "pbdZMQ", "rstan", "StanHeaders", "styler"))
ls
rm(list=ls())
library(rstan)
options(mc.cores = parallel::detectCores())
#--------------------------------------------
# color palette
c_light <- c("#fee0d2")
c_mid <- c("#fc9272")
c_dark <- c("#de2d26")
c_simu <- "chartreuse3"
c_posterior = "orange"
c_prior = "aquamarine2"
set.seed(1) # for reproductibility
getwd()
list.dirs()
install.packages(c("bayesplot", "QuickJSR"))
setwd("~/Bayesian_Aggregation_Average_Data")
#--------------------------------------------
library(tidybayes)
library(gridExtra)
library(tidyverse)
df_swiss <- read_csv("~/Bayesian_Aggregation_Average_Data/disease_transmission_workflow/data/swiss_agg_data.csv")
df_swiss <- read_csv("~/Bayesian_Aggregation_Average_Data/disease_transmission_workflow/data/swiss_agg_data.csv")
#-------------------------------------------------------------------------------------------------------------------
df_swiss %>%
ggplot() +
geom_bar(mapping = aes(x = date, y = report_dt), fill = c_mid, color = c_dark, stat = "identity") +
labs(y="Number of reported cases")
#--------------------------------------------------------------------------------------------------------------------
# Swiss population
N <- 8.57E6;
#initial conditions
i0 <- 1
s0 <- N - i0
r0 <- 0
y0 = c(S = s0, I = i0, R = r0) # initial state
#---------------------------------------------------------------------------------------------------------
seir_model <- stan_model("./disease_transmission_workflow/stan_models/models_swiss/seir_ode_final.stan")
#---------------------------------------------------------------------------------------------------------
seir_model <- stan_model("./seir_ode_final.stan")
getwd()
#list.dirs()
setwd("~/Bayesian_Aggregation_Average_Data")
getwd()
#---------------------------------------------------------------------------------------------------------
seir_model <- stan_model("./PharmacODE/seir_ode_final.stan")
#---------------------------------------------------------------------------------------------------------
cases <- df_swiss$report_dt
# times
n_days <- length(cases)
t <- seq(1, n_days, by = 1)
t0 = 0
ts <- t
data_seir <- list(n_days = n_days, t0 = t0, ts = ts, N = N, cases = cases)
#-----------------------------------------------------------------------------
fit_seir <- sampling(seir_model,
data_seir,
iter=1000,
seed = 0)
data_seir <- list(n_days = n_days, t0 = t0, ts = ts, tswitch = tswitch, N = N, cases = cases)
#-----------------------------------------------------------------------------
fit_seir <- sampling(seir_model,
data_seir,
iter=1000,
seed = 0)
#---------------------------------------------------------------------------------------------------------
cases <- df_swiss$report_dt
# times
n_days <- length(cases)
t <- seq(1, n_days, by = 1)
t0 = 0
ts <- t
data_seir <- list(n_days = n_days, t0 = t0, ts = ts, tswitch = tswitch, N = N, cases = cases)
#-----------------------------------------------------------------------------
fit_seir <- sampling(seir_model,
data_seir,
iter=1000,
seed = 0)
date_switch <- "2020-03-13" # date of introduction of control measures
tswitch <- df_swiss %>%
filter(date < date_switch) %>%
nrow() + 1 # convert time to number
data_seir <- list(n_days = n_days, t0 = t0, ts = ts, tswitch = tswitch, N = N, cases = cases)
#-----------------------------------------------------------------------------
fit_seir <- sampling(seir_model,
data_seir,
iter=1000,
seed = 0)
data_seir <- list(n_days = n_days, t0 = t0, ts = ts, tswitch = tswitch, N = N, cases = cases)
date_survey_left <- "2020-05-04"
date_survey_right <- "2020-05-07"
t_survey_start <- df_swiss %>% filter(date < date_survey_left) %>% nrow() + 1 # convert time to number
t_survey_end <- df_swiss %>% filter(date < date_survey_right) %>% nrow() + 1 # convert time to number
n_infected_survey <-  83
n_tested_survey <-  775
# add these data to the data given to stan
data_seir_survey <- c(data_seir, list(t_survey_start = t_survey_start,
t_survey_end = t_survey_end,
n_infected_survey = n_infected_survey,
n_tested_survey = n_tested_survey))
#-----------------------------------------------------------------------------
fit_seir <- sampling(seir_model,
data_seir,
iter=1000,
seed = 0)
#-----------------------------------------------------------------------------
fit_seir <- sampling(seir_model,
data_seir_survey,
iter=1000,
seed = 0)
#-----------------------------------------------------------------------------
check_hmc_diagnostics(fit_sir)
#-----------------------------------------------------------------------------
check_hmc_diagnostics(fit_seir)
pars = c("beta", "gamma", "phi", "alpha", "p_rep", "lp__")
summary(fit_sir, pars=pars)
summary(fit_seir, pars=pars)
pars = c("beta", "gamma", "phi", "alpha", "p_rep", "eta","nu","xi","lp__")
summary(fit_seir, pars=pars)
traceplot(fit_sir, pars=pars)
traceplot(fit_seir, pars=pars)
#----------------------------------------------------------------------------------------------------------------------------------
dim(as.data.frame(summary(fit_seir, pars = "pred_cases", probs = c(0.025, 0.05, 0.1, 0.5, 0.9, 0.95, 0.975))$summary))
smr_pred <- cbind(as.data.frame(summary(fit_seir, pars = "pred_cases", probs = c(0.025, 0.05, 0.1, 0.5, 0.9, 0.95, 0.975))$summary),
t=1:(n_days-1),
cases = cases[1:length(cases)-1]
)
colnames(smr_pred)
colnames(smr_pred) <- make.names(colnames(smr_pred)) # to remove % in the col names
ggplot(smr_pred, mapping = aes(x = t)) +
#geom_ribbon(aes(ymin = X2.5., ymax = X97.5.), fill = c_dark, ) +
geom_ribbon(aes(ymin = X5., ymax = X95.), fill = c_posterior, alpha=0.35) +
#geom_ribbon(aes(ymin = X10., ymax = X90.), fill = c_light) +
geom_line(mapping = aes(x = t, y = X50.), color = c_posterior) +
geom_point(mapping = aes(y = cases)) +
labs(x = "Day", y = "Incidence")
#----------------------------------------------------------------------------------------------------------------------------------------------
fit_seir %>%
spread_draws(pred_cases[n_days]) %>%
left_join(tibble(cases = cases, n_days = 1:length(cases))) %>%
group_by(n_days, .chain) %>%
summarise(cases = mean(cases), pred_mean = mean(pred_cases), pred_9 = quantile(pred_cases, 0.95), pred_1 = quantile(pred_cases, 0.05)) %>%
ggplot(aes(x = n_days)) +
geom_ribbon(aes(ymin = pred_1, ymax = pred_9), fill = c_posterior, alpha=0.35)+
geom_line(mapping = aes(y=pred_mean), color = c_posterior)+
geom_point(mapping = aes(y=cases), size=0.1)+
facet_wrap(~.chain)
#-----------------------------------------------------------------------------------------------------------------------------------------------
fit_seir %>%
spread_draws(alpha) %>%
filter(.chain == 2) %>%
ggplot() +
geom_histogram(mapping = aes(x = alpha), fill=c_posterior, color=c_dark)
