Theta <-mvrnorm(N, mu_theta, Phi) # sample factor scores
Epsilon <-mvrnorm(N, mu_epsilon, Psi) # sample error vector
Y<-Theta%*%t(L)+Epsilon# generate observable data
library("rbokeh")
df<-data.frame(Y)
tools <- c("pan", "wheel_zoom", "resize", "reset")
nms <- expand.grid(names(df)[1:P], rev(names(df)[1:P]), stringsAsFactors = FALSE)
nms$yaxis <- rep(c(TRUE, rep(FALSE, P-1)), P)
nms$xaxis <- c(rep(FALSE, (P-1)*P), rep(TRUE, P))
nms$h <- nms$w <- 75
nms$h[nms$xaxis] <- nms$w[nms$yaxis] <- 90
splom_list <- vector("list", P^2)
for(i in seq_along(splom_list)) {
splom_list[[i]] <- figure(width = nms$w[i], height = nms$h[i],
tools = tools, min_border = 2) %>%
ly_points(nms$Var1[i], nms$Var2[i], data = df,
size = 1) %>%
x_axis(visible = nms$xaxis[i]) %>%
y_axis(visible = nms$yaxis[i])
}
grid_plot(splom_list, nrow = P, ncol = P, same_axes = TRUE, link_data = TRUE)
install.packages("gridPlot")
install.packages(c("testthat", "trialr"))
library(dplyr)
library(rstan)
library(bayesplot)
library(Metrics)
options(mc.cores = parallel::detectCores())
rstan_options(auto_write = TRUE)
#========================================================================
data_list <- readRDS(file = paste0(getwd(),'/Documents/Github',
'/Stan/Factorization/factor_data_list.rds', sep = ""))
#========================================================================
data_list <- readRDS(file = paste0(getwd(),#'/Documents/Github',
'/Stan/Factorization/factor_data_list.rds', sep = ""))
#------------------------------------------------------------------------
remove(model)
model = stan_model(paste0(getwd(),'/Documents/Github' ,
'/Stan/RStan/Models/factor_mvn.stan'))
model = stan_model(paste0(getwd(),#'/Documents/Github' ,
'/Stan/RStan/Models/factor_mvn.stan'))
#------------------------------------------------------------------------
remove(fit)
fit <- sampling(object = model,
data = data_list,
init = "random",
control = list(adapt_delta = 0.95),
chains = 4,
iter = 888,
warmup = 555,
thin = 1,
verbose = TRUE)
s <- summary(fit)
dfs <- data.frame(s$summary)
install.packages(c("posterior", "rlang", "tidybayes"))
install.packages("vctrs")
install.packages("blob")
install.packages(c("commonmark", "gtable", "htmlwidgets", "tibble"))
install.packages(c("gtable", "ps"))
install.packages(c("dbplyr", "distributional", "dplyr", "dtplyr", "googledrive", "hexbin", "hms", "modelr", "pillar", "vctrs"))
install.packages(c("cli", "googlesheets4", "htmltools", "xfun"))
install.packages("rmarkdown")
install.packages(c("ggplot2", "loo", "ps", "rstantools"))
install.packages(c("igraph", "markdown", "quantreg", "V8"))
install.packages(c("gargle", "zoo"))
install.packages(c("fontawesome", "processx", "ps", "tinytex", "vctrs", "xfun", "xts", "zip"))
install.packages("dplyr")
library(dplyr)
library(rstan)
library(bayesplot)
library(Metrics)
options(mc.cores = parallel::detectCores())
rstan_options(auto_write = TRUE)
#========================================================================
data_list <- readRDS(file = paste0(getwd(),#'/Documents/Github',
'/Stan/Factorization/factor_data_list.rds', sep = ""))
#------------------------------------------------------------------------
remove(model)
model = stan_model(paste0(getwd(),#'/Documents/Github' ,
'/Stan/RStan/Models/factor_mvn.stan'))
#========================================================================
data_list <- readRDS(file = paste0(getwd(),#'/Documents/Github',
'/Stan/Factorization/factor_data_list.rds', sep = ""))
#------------------------------------------------------------------------
remove(model)
model = stan_model(paste0(getwd(),#'/Documents/Github' ,
'/Stan/RStan/Models/factor_mvn.stan'))
#------------------------------------------------------------------------
remove(model)
model = stan_model(paste0(getwd(),#'/Documents/Github' ,
'/Stan/RStan/Models/factor_mvn.stan'))
#------------------------------------------------------------------------
remove(fit)
fit <- sampling(object = model,
data = data_list,
init = "random",
control = list(adapt_delta = 0.95),
chains = 4,
iter = 888,
warmup = 555,
thin = 1,
verbose = TRUE)
model = stan_model(paste0(getwd(),#'/Documents/Github' ,
'/Stan/RStan/Models/factor_mvn.stan'))
#========================================================================
remove(list = ls())
#========================================================================
data_list <- readRDS(file = paste0(getwd(),#'/Documents/Github',
'/Stan/Factorization/factor_data_list.rds', sep = ""))
#------------------------------------------------------------------------
remove(model)
model = stan_model(paste0(getwd(),#'/Documents/Github' ,
'/Stan/RStan/Models/factor_mvn.stan'))
library(dplyr)
library(rstan)
library(bayesplot)
library(Metrics)
options(mc.cores = parallel::detectCores())
rstan_options(auto_write = TRUE)
#========================================================================
data_list <- readRDS(file = paste0(getwd(),'/Documents/Github',
'/Stan/Factorization/factor_data_list.rds', sep = ""))
data_list$N
data_list$P
data_list$D
data_list$Y
#------------------------------------------------------------------------
remove(model)
model = stan_model(paste0(getwd(),'/Documents/Github' ,
'/Stan/RStan/Models/factor_mvn.stan'))
#------------------------------------------------------------------------
remove(fit)
fit <- sampling(object = model,
data = data_list,
init = "random",
control = list(adapt_delta = 0.95),
chains = 1,
iter = 1,
#warmup = 555,
#thin = 1,
verbose = TRUE)
#========================================================================
data_list <- readRDS(file = paste0(getwd(),#'/Documents/Github',
'/Stan/Factorization/factor_data_list.rds', sep = ""))
data_list$N
data_list$P
data_list$D
model = stan_model(paste0(getwd(),#'/Documents/Github' ,
'/Stan/RStan/Models/factor_mvn.stan'))
#========================================================================
data_list <- readRDS(file = paste0(getwd(),#'/Documents/Github',
'/Stan/Factorization/factor_data_list.rds', sep = ""))
data_list$N
data_list$P
data_list$D
data_list$Y
#------------------------------------------------------------------------
remove(model)
model = stan_model(paste0(getwd(),#'/Documents/Github' ,
'/Stan/RStan/Models/factor_mvn.stan'))
library(dplyr)
library(rstan)
library(bayesplot)
library(Metrics)
options(mc.cores = parallel::detectCores())
rstan_options(auto_write = TRUE)
#========================================================================
data_list <- readRDS(file = paste0(getwd(),#'/Documents/Github',
'/Stan/Factorization/factor_data_list.rds', sep = ""))
data_list$N
data_list$P
data_list$D
data_list$Y
#------------------------------------------------------------------------
remove(model)
model = stan_model(paste0(getwd(),#'/Documents/Github' ,
'/Stan/RStan/Models/factor_mvn.stan'))
#------------------------------------------------------------------------
remove(fit)
fit <- sampling(object = model,
data = data_list,
init = "random",
control = list(adapt_delta = 0.95),
chains = 1,
iter = 1,
#warmup = 555,
#thin = 1,
verbose = TRUE)
install.packages('IRkernel')
IRkernel::installspec()
#========================================================================
data_list <- readRDS(file = paste0(getwd(),#'/Documents/Github',
'/Stan/Factorization/factor_data_list.rds', sep = ""))
data_list$N
data_list$P
data_list$D
data_list$Y
#------------------------------------------------------------------------
remove(model)
model = stan_model(paste0(getwd(),#'/Documents/Github' ,
'/Stan/RStan/Models/factor_mvn.stan'))
#------------------------------------------------------------------------
remove(fit)
fit <- sampling(object = model,
data = data_list,
init = "random",
control = list(adapt_delta = 0.95),
chains = 1,
iter = 1,
#warmup = 555,
#thin = 1,
verbose = TRUE)
fit <- sampling(object = model,
data = data_list,
init = "random",
control = list(adapt_delta = 0.95),
chains = 4,
iter = 888,
warmup = 555,
thin = 1,
verbose = TRUE)
s <- summary(fit)
dfs <- data.frame(s$summary)
result <- filter(dfs, Rhat > 1.1)
row.names(result)
names(fit)
traceplot(fit, pars=c("delta_mu"))
#-------------------------------------------------
theme_Posterior = theme(
axis.line.x = element_line(arrow=arrow(length=unit(0.05, "cm")), lineend = "butt"),
panel.background = element_rect(fill="transparent"),
panel.border = element_rect(fill="transparent"),
plot.background = element_rect(fill = "transparent"),
#panel.spacing.y = unit(1,"lines"),
plot.margin = unit(c(1,1,1,1), "cm"),
#
axis.title.y = element_blank(),
axis.text.y = element_text(color = "grey20", size = 8, angle = 0, hjust = 1, vjust = 0, face = "plain"),
axis.text.x = element_text(color="grey20",hjust=1, vjust=1, size=8, angle=50, face="plain"),
axis.ticks.y = element_blank()
)
#---------------------------
plot(fit,
pars = names(fit)[c(1:3)],
show_density = FALSE,
fill_color = "#998811",
est_color = "#ffffff",
ci_level = 0.9, outer_level=0.95) +
geom_vline(xintercept = 0, linetype = 3, linewidth = 0.5) +
theme_Posterior
traceplot(fit, pars=c("L_d"))
#---------------------------
plot(fit,
pars = names(fit)[c(1:24)],
show_density = FALSE,
fill_color = "#998811",
est_color = "#ffffff",
ci_level = 0.9, outer_level=0.95) +
geom_vline(xintercept = 0, linetype = 3, linewidth = 0.5) +
theme_Posterior
plot(fit,
pars = c('L'),
show_density = FALSE,
fill_color = "#998811",
est_color = "#ffffff",
ci_level = 0.9, outer_level=0.95) +
geom_vline(xintercept = 0, linetype = 3, linewidth = 0.5) +
theme_Posterior
install.packages("bayesplot")
R
library(Metrics)
#------------------------------------------------------------------------
remove(model)
model = stan_model(paste0(getwd(),#'/Documents/Github' ,
'/Stan/RStan/Models/factor_mvn.stan'))
#------------------------------------------------------------------------
remove(fit)
fit <- sampling(object = model,
data = data_list,
init = "random",
control = list(adapt_delta = 0.95),
chains = 4,
iter = 888,
warmup = 555,
thin = 1,
verbose = TRUE)
s <- summary(fit)
dfs <- data.frame(s$summary)
library(dplyr)
library(rstan)
library(bayesplot)
library(Metrics)
options(mc.cores = parallel::detectCores())
rstan_options(auto_write = TRUE)
s <- summary(fit)
dfs <- data.frame(s$summary)
result <- filter(dfs, Rhat > 1.1)
row.names(result)
names(fit)
traceplot(fit, pars=c("L_d"))
#-------------------------------------------------
theme_Posterior = theme(
axis.line.x = element_line(arrow=arrow(length=unit(0.05, "cm")), lineend = "butt"),
panel.background = element_rect(fill="transparent"),
panel.border = element_rect(fill="transparent"),
plot.background = element_rect(fill = "transparent"),
#panel.spacing.y = unit(1,"lines"),
plot.margin = unit(c(1,1,1,1), "cm"),
#
axis.title.y = element_blank(),
axis.text.y = element_text(color = "grey20", size = 8, angle = 0, hjust = 1, vjust = 0, face = "plain"),
axis.text.x = element_text(color="grey20",hjust=1, vjust=1, size=8, angle=50, face="plain"),
axis.ticks.y = element_blank()
)
#---------------------------
plot(fit,
pars = names(fit)[c(1:24)],
show_density = FALSE,
fill_color = "#998811",
est_color = "#ffffff",
ci_level = 0.9, outer_level=0.95) +
geom_vline(xintercept = 0, linetype = 3, linewidth = 0.5) +
theme_Posterior
plot(fit,
pars = c('L'),
show_density = FALSE,
fill_color = "#998811",
est_color = "#ffffff",
ci_level = 0.9, outer_level=0.95) +
geom_vline(xintercept = 0, linetype = 3, linewidth = 0.5) +
theme_Posterior
library(bayesplot)
install.packages("StanHeaders")
library(bayesplot)
install.packages("styler")
install.packages("bayesplot")
#===========================================
devtools::install_github("stan-dev/bayesplot")
#===========================================
if (!require("devtools")) {
install.packages("devtools")
}
install.packages("devtools")
devtools::install_github("stan-dev/bayesplot")
#===========================================
if (!require("devtools")) {
install.packages("devtools")
}
devtools::install_github("stan-dev/bayesplot")
install.packages("StanHeaders")
install.packages("matrixStats")
install.packages("styler")
install.packages(c("StanHeaders", "vctrs"))
install.packages("testthat")
install.packages("digest")
install.packages(c("digest", "Rcpp", "testthat"))
install.packages("lintr")
sudo apt update
install.packages(c("ggplot2", "languageserver"))
install.packages(c("cyclocomp", "dplyr", "gtable", "pbdZMQ", "rstan", "StanHeaders", "styler"))
knitr::opts_chunk$set(echo = TRUE)
ls()
rm(list=ls())
library(rstan)
options(mc.cores = parallel::detectCores())
#--------------------------------------------
get_cwd()
#--------------------------------------------
get_wd()
#--------------------------------------------
getwd()
list.dirs('.')
list.dirs()
setwd("~/Bayesian_Aggregation_Average_Data")
setwd("~/Bayesian_Aggregation_Average_Data")
list.dirs()
#--------------------------------------------
getwd()
#--------------------------------------------
library(tidybayes)
library(gridExtra)
df_swiss <- read_csv("data/swiss_agg_data.csv")
install.packages("tidybayes")
#--------------------------------------------
library(tidybayes)
library(gridExtra)
df_swiss <- read_csv("data/swiss_agg_data.csv")
library(tidyverse)
df_swiss <- read_csv("data/swiss_agg_data.csv")
df_swiss <- read_csv("~/Bayesian_Aggregation_Average_Data/disease_transmission_workflow/data/swiss_agg_data.csv")
#-------------------------------------------------------------------------------------------------------------------
df_swiss %>%
ggplot() +
geom_bar(mapping = aes(x = date, y = report_dt), fill = c_mid, color = c_dark, stat = "identity") +
labs(y="Number of reported cases")
# color palette
c_light <- c("#fee0d2")
c_mid <- c("#fc9272")
c_dark <- c("#de2d26")
c_simu <- "chartreuse3"
c_posterior = "orange"
c_prior = "aquamarine2"
set.seed(1) # for reproductibility
#------------------------------------------
rm(list=ls())
library(rstan)
options(mc.cores = parallel::detectCores())
#--------------------------------------------
getwd()
list.dirs()
setwd("~/Bayesian_Aggregation_Average_Data")
#--------------------------------------------
library(tidybayes)
library(gridExtra)
library(tidyverse)
df_swiss <- read_csv("~/Bayesian_Aggregation_Average_Data/disease_transmission_workflow/data/swiss_agg_data.csv")
#-------------------------------------------------------------------------------------------------------------------
df_swiss %>%
ggplot() +
geom_bar(mapping = aes(x = date, y = report_dt), fill = c_mid, color = c_dark, stat = "identity") +
labs(y="Number of reported cases")
c_mid <- c("#fc9272")
#-------------------------------------------------------------------------------------------------------------------
df_swiss %>%
ggplot() +
geom_bar(mapping = aes(x = date, y = report_dt), fill = c_mid, color = c_dark, stat = "identity") +
labs(y="Number of reported cases")
# color palette
c_light <- c("#fee0d2")
c_mid <- c("#fc9272")
c_dark <- c("#de2d26")
c_simu <- "chartreuse3"
c_posterior = "orange"
c_prior = "aquamarine2"
set.seed(1) # for reproductibility
#-------------------------------------------------------------------------------------------------------------------
df_swiss %>%
ggplot() +
geom_bar(mapping = aes(x = date, y = report_dt), fill = c_mid, color = c_dark, stat = "identity") +
labs(y="Number of reported cases")
#--------------------------------------------------------------------------------------------------------------------
# Swiss population
N <- 8.57E6;
#initial conditions
i0 <- 1
s0 <- N - i0
r0 <- 0
y0 = c(S = s0, I = i0, R = r0)
#--------------------------------------------------
sir_model <- stan_model("./disease_transmission_workflow/stan_models/models_swiss/sir_incidence.stan")
# times
n_days <- length(cases)
t <- seq(1, n_days, by = 1)
t0 = 0
t <- t
data_sir <- list(n_days = n_days, y0 = y0, t0 = t0, ts = t, N = N, cases = cases)
cases <- df_swiss$report_dt
# times
n_days <- length(cases)
t <- seq(1, n_days, by = 1)
t0 = 0
t <- t
data_sir <- list(n_days = n_days, y0 = y0, t0 = t0, ts = t, N = N, cases = cases)
#-----------------------------------------------------------------------------
fit_sir <- sampling(sir_model,
data_sir,
iter=1000,
seed = 0)
#--------------------------------------------------
sir_model <- stan_model("./disease_transmission_workflow/stan_models/models_swiss/sir_incidence.stan")
#--------------------------------------------------
sir_model <- stan_model("./disease_transmission_workflow/stan_models/models_swiss/sir_incidence.stan")
#--------------------------------------------------
sir_model <- stan_model("./disease_transmission_workflow/stan_models/models_swiss/sir_incidence.stan")
#--------------------------------------------------
sir_model <- stan_model("./disease_transmission_workflow/stan_models/models_swiss/sir_incidence.stan")
#--------------------------------------------------
sir_model <- stan_model("./disease_transmission_workflow/stan_models/models_swiss/sir_incidence.stan")
#--------------------------------------------------
sir_model <- stan_model("./disease_transmission_workflow/stan_models/models_swiss/sir_incidence.stan")
#--------------------------------------------------
sir_model <- stan_model("./disease_transmission_workflow/stan_models/models_swiss/sir_incidence.stan")
#--------------------------------------------------
sir_model <- stan_model("./disease_transmission_workflow/stan_models/models_swiss/sir_incidence.stan")
#--------------------------------------------------
sir_model <- stan_model("./disease_transmission_workflow/stan_models/models_swiss/sir_incidence.stan")
#--------------------------------------------------
sir_model <- stan_model("./disease_transmission_workflow/stan_models/models_swiss/sir_incidence.stan")
#--------------------------------------------------
sir_model <- stan_model("./disease_transmission_workflow/stan_models/models_swiss/sir_incidence.stan")
#--------------------------------------------------
sir_model <- stan_model("./disease_transmission_workflow/stan_models/models_swiss/sir_incidence.stan")
#-----------------------------------------------------------------------------
fit_sir <- sampling(sir_model,
data_sir,
iter=1000,
seed = 0)
#-----------------------------------------------------------------------------
summary(fit_sir)
traceplot(fit_sir)
summary(fit_sir, pars=pars)
#-----------------------------------------------------------------------------
pars = c("beta", "gamma", "phi")
summary(fit_sir, pars=pars)
traceplot(fit_sir, pars=pars)
#---------------------------------------------------------------------------------------------------------
sir_model <- stan_model("./disease_transmission_workflow/stan_models/models_swiss/sir_ode_incidence.stan")
#-----------------------------------------------------------------------------
fit_sir <- sampling(sir_model,
data_sir,
iter=1000,
seed = 0)
